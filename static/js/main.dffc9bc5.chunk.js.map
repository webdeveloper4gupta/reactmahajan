{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","msg","word","aman","toLowerCase","charAt","toUpperCase","slice","capitalize","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","style","color","headingcolor","aboutText","onClick","toggleModes","aria-checked","htmlFor","toggleMode","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","rows","onChange","event","console","log","target","value","backgroundColor","mahajan","showAlert","mahajans","gupta","replace","i","length","push","join","aman1","document","getElementById","fontFamily","aman2","aman3","select","navigator","clipboard","writeText","split","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.dffc9bc5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        let aman=word.toLowerCase();\r\n        return aman.charAt(0).toUpperCase()+aman.slice(1);\r\n    }\r\n  return (\r\n   props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  {props.alert.msg}:{capitalize(props.alert.type)}\r\n  {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\" style={{color:props.headingcolor} } >Home</a>\r\n          {/* here link-to used for usiing router */}\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\" style={{color:props.headingcolor} } >Home</Link> */}\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\"  style={{color:props.headingcolor} }href=\"#\">{props.aboutText}</a>\r\n          {/* <Link className=\"nav-link\"  style={{color:props.headingcolor} }to=\"/about\">{props.aboutText}</Link> */}\r\n        </li>\r\n        {/* <li className=\"nav-item dropdown\">\r\n          <a className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n            Dropdown\r\n          </a>\r\n          <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n            <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n            <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n            <li><hr className=\"dropdown-divider\"/></li>\r\n            <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n          </ul>\r\n        </li> */}\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link disabled\">Disabled</a>\r\n        </li> */}\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n        <div className={`form-check form-switch text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n  <input className=\"form-check-input\" onClick= {props.toggleModes} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" aria-checked/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable green mode</label>\r\n</div>\r\n      <div className={`form-check form-switch text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n  <input className=\"form-check-input\" onClick= {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"aria-checked/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable different mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\n// to ensure we send only string\r\nNavbar.propTypes = {title:PropTypes.string.isRequired,\r\naboutText:PropTypes.string\r\n}\r\n// default prop\r\nNavbar.defaultProps={\r\n    title:\"pleas enter here title\",\r\n    aboutText:\"About\"\r\n}","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick =()=>{\r\n      \r\n        console.log(\"upper case envoked\");\r\n        let mahajan=text.toUpperCase();\r\n        setText(mahajan);\r\n        props.showAlert(\"you want to  upper case\",\"success\");\r\n    }\r\n    const handleOnChange =(event)=>{\r\n        console.log(\"ON CHANGE\");\r\n        setText(event.target.value);//NOW I ABLE TO CHANGE THE TEXT IN THE BOX\r\n    }\r\n    const handlelowClick =()=>{\r\n      console.log(\"LOWER case envoked\");\r\n        let mahajans=text.toLowerCase();\r\n        setText(mahajans);\r\n    }\r\n    const  handleClear =()=>{\r\n      let gupta=text.replace(text,\" \");\r\n     \r\n      setText(gupta);\r\n    }\r\n   \r\n    const handlereverse =()=>{\r\n      let aman=[];\r\n      let lengths=text.length-1;\r\n      for(let i=lengths;i>=0;i--){\r\n        aman.push(text[i]);\r\n      }\r\n      setText(aman.join(\"\"));\r\n    \r\n    }\r\n    const handleColor =()=>{\r\n     let aman1=document.getElementById(\"myBox\");\r\n     aman1.style.color=\"red\";\r\n     aman1.style.fontFamily=\"italic\"\r\n    }\r\n    const handleNormal =()=>{\r\n      let aman2=document.getElementById(\"myBox\");\r\n      aman2.style.color=\"black\";\r\n      aman2.style.fontFamily=\"Normal\";\r\n    }\r\n    const handleCopy =()=>{\r\n      let aman3=document.getElementById(\"myBox\");\r\n      aman3.select();\r\nnavigator.clipboard.writeText(aman3.value);\r\n    }\r\n    const[text,setText]=useState(\"\");\r\n    // text=\"aman gupta\" its wrong youcannnot update this\r\n    // for updationyou can use only setText for updation\r\n    // setText(\"new text put here\");\r\n  return (\r\n    <>\r\n     <div className='container'style={{color : props.mode==='dark'?'white':'black'}}>\r\n    <h1>{props.heading}</h1>\r\n<div className=\"mb-3 \">\r\n  {/* <label for=\"myBox\" className=\"form-label\">Example textarea</label> */}\r\n  <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" onChange={handleOnChange} style={{backgroundColor : props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}} value={text}></textarea>\r\n</div>\r\n<button className=\"btn btn-dark mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n<button className=\"btn btn-info mx-1\" onClick={handlelowClick}>Convert to Lowercase</button>\r\n<button className=\"btn btn-danger mx-1\" onClick={handleClear}>Clear the text area</button>\r\n<button className=\"btn btn-primary mx-1\" onClick={handlereverse}>Reverse Text</button>\r\n<button className=\"btn btn-success mx-1\" onClick={handleColor}>Red Text+Italic font</button>\r\n<button className=\"btn btn-warning mx-1\" onClick={handleNormal}>Normal Text</button>\r\n<button className=\"btn btn-secondary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n</div>\r\n    \r\n    <div className=\"container my-4 mx-1\" style={{color : props.mode==='dark'?'white':'black'}}>\r\n      <div className=\"row\">\r\n      <h2>your text summary</h2>\r\n      <p>\r\n        {/* to calcilate the length and number of words */}\r\n       {text.length!==0?text.split(\" \").length-1:0} words and {text.length!==0?text.length-1:0} characters \r\n      </p>\r\n      <p>\r\n        {text.length>0?0.008*text.split(\" \").length:0} Minute taken by user to read\r\n      </p>\r\n      <h1>preview</h1>\r\n      <div className=\"col-sm-12\">\r\n      <p id=\"mahajan\">\r\n        {text.length>0?text:\"please enter something to preview\"}\r\n      </p>\r\n      </div>\r\n    \r\n    </div>\r\n    \r\n      </div>\r\n      \r\n    </>\r\n   \r\n  )\r\n}\r\n","// import logo from './logo.svg';\nimport React, { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n\n// } from \"react-router-dom\";\nimport './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\n// let mahajan=\"gupta sahab\";\nimport Navbar from './components/Navbar';\nimport  TextForm from './components/TextForm';\n\nfunction App() {\n  const [mode,setMode]=useState(\"light\");// whreather dark mode enable or not\nconst[alert,setAlert]=useState(null);\nconst showAlert=(message,type)=>{\n  setAlert({\n    msg:message,\n    type:type\n  })\n  setTimeout(()=>{\n       setAlert(null);\n  },3000);\n}\n  const toggleMode=()=>{\n    if(mode === \"light\"){\n      setMode(\"dark\");// setMode is the funcction which changes the value of mode\n      document.body.style.backgroundColor=\"grey\";\n      showAlert(\"you have enable dark mode\",\"success\");\n      // to dynamically change the title\n      document.title=\"Mahajan App-darkmode\";\n    }\n    else{\n      setMode(\"light\");\n      document.body.style.backgroundColor=\"white\";\n      showAlert(\"YOU ENABLE LIGHT MODE\",\"success\");\n      document.title=\"Mahajan App-lightMode\";\n    }\n  }\n  const toggleModes=()=>{\n    if(mode === \"light\"){\n      setMode(\"success\");// setMode is the funcction which changes the value of mode\n      document.body.style.backgroundColor=\"grey\";\n      showAlert(\"you have enable green mode\",\"success\");\n    }\n    else{\n      setMode(\"light\");\n      document.body.style.backgroundColor=\"white\";\n      showAlert(\"YOU ENABLE LIGHT MODE\",\"success\");\n    }\n  }\n  return (\n \n<>\n{/* title and aboutText is props and Navbar is component */}\n{/* <Navbar title=\"MYAPP\" aboutText=\"About Myapp\" /> */}\n{/* <Navbar/> */}\n\n{/* <Router> */}\n\n\n\n<Navbar title=\"MyAPP\" mode={mode} toggleMode={toggleMode} toggleModes={toggleModes}headingcolor=\"red\"/>\n<Alert alert={alert}/>\n   <div className=\"container my-3\">\n   {/* <Switch> */}\n          {/* <Route exect path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route exect path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"enter the text to analyse\" mode={mode} />\n          {/* </Route> */}\n        {/* </Switch> */}\n   {/* <TextForm showAlert={showAlert} heading=\"enter the text to analyse\" mode={mode} /> */}\n     {/* <About/> */}\n   </div>\n   {/* </Router> */}\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}